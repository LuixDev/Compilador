
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 15 16:05:25 COT 2022
//----------------------------------------------------

package compiladorfinal;

import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 15 16:05:25 COT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\010\000\002" +
    "\004\003\000\002\005\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\007\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\010\003\005\025\010\031\007\001\002\000" +
    "\014\002\ufffe\003\ufffe\014\ufffe\025\ufffe\031\ufffe\001\002" +
    "\000\014\002\ufff5\003\ufff5\014\ufff5\025\ufff5\031\ufff5\001" +
    "\002\000\012\002\000\003\005\025\010\031\007\001\002" +
    "\000\012\015\055\021\053\022\052\024\054\001\002\000" +
    "\004\005\013\001\002\000\004\002\012\001\002\000\004" +
    "\002\001\001\002\000\016\005\020\021\021\022\017\023" +
    "\015\024\016\031\025\001\002\000\010\006\uffef\017\046" +
    "\020\047\001\002\000\010\006\uffe8\017\uffe8\020\uffe8\001" +
    "\002\000\004\006\ufff0\001\002\000\026\004\ufff2\006\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\001\002\000\012\005\020\021\021\022\017" +
    "\031\025\001\002\000\026\004\ufff3\006\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\001\002\000\024\006\uffe7\011\031\012\030\013\033\014" +
    "\032\015\034\016\035\017\uffe7\020\uffe7\001\002\000\004" +
    "\006\026\001\002\000\010\006\uffe4\017\uffe4\020\uffe4\001" +
    "\002\000\026\004\ufff1\006\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002\000" +
    "\004\004\027\001\002\000\014\002\ufffd\003\ufffd\014\ufffd" +
    "\025\ufffd\031\ufffd\001\002\000\012\005\020\021\021\022" +
    "\017\031\025\001\002\000\012\005\020\021\021\022\017" +
    "\031\025\001\002\000\012\005\020\021\021\022\017\031" +
    "\025\001\002\000\012\005\020\021\021\022\017\031\025" +
    "\001\002\000\012\005\020\021\021\022\017\031\025\001" +
    "\002\000\012\005\020\021\021\022\017\031\025\001\002" +
    "\000\010\006\uffe9\017\uffe9\020\uffe9\001\002\000\010\006" +
    "\uffea\017\uffea\020\uffea\001\002\000\010\006\uffeb\017\uffeb" +
    "\020\uffeb\001\002\000\010\006\uffec\017\uffec\020\uffec\001" +
    "\002\000\010\006\uffed\017\uffed\020\uffed\001\002\000\010" +
    "\006\uffee\017\uffee\020\uffee\001\002\000\004\006\045\001" +
    "\002\000\026\004\ufff4\006\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\001\002\000" +
    "\014\005\020\021\021\022\017\023\015\031\025\001\002" +
    "\000\014\005\020\021\021\022\017\023\015\031\025\001" +
    "\002\000\010\006\uffe6\017\uffe6\020\uffe6\001\002\000\010" +
    "\006\uffe5\017\uffe5\020\047\001\002\000\004\004\101\001" +
    "\002\000\004\004\100\001\002\000\004\004\077\001\002" +
    "\000\016\003\005\025\010\026\057\027\060\030\056\031" +
    "\007\001\002\000\004\005\074\001\002\000\004\005\071" +
    "\001\002\000\004\005\066\001\002\000\012\003\005\014" +
    "\063\025\010\031\007\001\002\000\014\002\uffff\003\uffff" +
    "\014\uffff\025\uffff\031\uffff\001\002\000\012\005\020\021" +
    "\021\022\017\031\025\001\002\000\004\004\065\001\002" +
    "\000\014\002\ufff6\003\ufff6\014\ufff6\025\ufff6\031\ufff6\001" +
    "\002\000\004\006\067\001\002\000\004\004\070\001\002" +
    "\000\014\002\ufffb\003\ufffb\014\ufffb\025\ufffb\031\ufffb\001" +
    "\002\000\004\006\072\001\002\000\004\004\073\001\002" +
    "\000\014\002\ufffc\003\ufffc\014\ufffc\025\ufffc\031\ufffc\001" +
    "\002\000\004\006\075\001\002\000\004\004\076\001\002" +
    "\000\014\002\ufffa\003\ufffa\014\ufffa\025\ufffa\031\ufffa\001" +
    "\002\000\014\002\ufff7\003\ufff7\014\ufff7\025\ufff7\031\ufff7" +
    "\001\002\000\014\002\ufff9\003\ufff9\014\ufff9\025\ufff9\031" +
    "\ufff9\001\002\000\014\002\ufff8\003\ufff8\014\ufff8\025\ufff8" +
    "\031\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\010\002\010\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\021\006\022\007\023\010\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\042\001\001\000\004\005\041\001\001\000" +
    "\004\005\040\001\001\000\004\005\037\001\001\000\004" +
    "\005\036\001\001\000\004\005\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\021\007\023\010\050\001\001" +
    "\000\010\005\021\007\023\010\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\060\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\061\001\001\000\002\001\001\000\004\005\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static Nodo padre;
	public int contador=0;

	//Listas para almacenar las PALABRAS RESERVADAS, SIMBOLOS, CADENAS Y VALORES NUMÉRICOS
	public static LinkedList<String> PalabraReservada = new LinkedList<String>();
	public static LinkedList<String> Simbolo = new LinkedList<String>();
	public static LinkedList<String> Cadenas = new LinkedList<String>();
  public static LinkedList<String> Variables = new LinkedList<String>();
	public static LinkedList<String> ValoresNumericos = new LinkedList<String>();
	
  public static LinkedList<String> Errores = new LinkedList<String>();

    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRE_LOGICA ::= EXPRE_COMPARACION 
            {
              Object RESULT =null;
		int comparacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comparacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comparacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("EXPRESION");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) comparacion);
    RESULT=tmp;

  	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_LOGICA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRE_LOGICA ::= EXPRE_LOGICA and EXPRE_LOGICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("LOGICA");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" and ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_LOGICA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRE_LOGICA ::= EXPRE_LOGICA or EXPRE_LOGICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("LOGICA");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" or ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_LOGICA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRE_COMPARACION ::= EXPRE_NUMERICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRE_COMPARACION ::= bool 
            {
              Object RESULT =null;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String logica = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(logica);

    Nodo tmp = new Nodo("BOOLEAN");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(logica);
    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRE_COMPARACION ::= EXPRE_NUMERICA diferente EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" != ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" != ");

    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRE_COMPARACION ::= EXPRE_NUMERICA cigual EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" == ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" == ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE_COMPARACION ::= EXPRE_NUMERICA menoigual EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" >= ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" <= ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRE_COMPARACION ::= EXPRE_NUMERICA mayoigual EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" >= ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" >= ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRE_COMPARACION ::= EXPRE_NUMERICA menque EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" < ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" < ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRE_COMPARACION ::= EXPRE_NUMERICA mayque EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

   	parser.Simbolo.add(" > ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" > ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRE_CADENA ::= EXPRE_LOGICA 
            {
              Object RESULT =null;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("BOOLEAN");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) logica);
    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRE_CADENA ::= cadena 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.Cadenas.add(texto);

    Nodo tmp = new Nodo("TEXTO");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(texto);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRE_NUMERICA ::= identificador 
            {
              Object RESULT =null;
		int identileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.Variables.add(identi); 

    Nodo tmp = new Nodo("IDENTIFICADOR");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(identi);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRE_NUMERICA ::= decimal 
            {
              Object RESULT =null;
		int numDecimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numDecimal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.ValoresNumericos.add(numDecimal); 

    Nodo tmp = new Nodo("DECIMAL");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(numDecimal);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRE_NUMERICA ::= entero 
            {
              Object RESULT =null;
		int numEnteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numEnteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numEntero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.ValoresNumericos.add(numEntero); 

    Nodo tmp = new Nodo("ENTERO");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(numEntero);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRE_NUMERICA ::= parizq EXPRE_NUMERICA parder 
            {
              Object RESULT =null;
		
  		parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) ");

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= identificador cigual INSTRUCCIONES mayoigual EXPRE_NUMERICA ptcoma 
            {
              Object RESULT =null;
		int nl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

      parser.Simbolo.add(" ; "); parser.Simbolo.add(" + ");  parser.Simbolo.add("="); 

     Nodo nd = new Nodo("First");
      nd.setValor(nl1);
      

      Nodo lla = new Nodo("ptcoma");
      lla.setValor(" ; ");
      lla.setIdNod(parser.contador++);
      

     Nodo inp = new Nodo("Mas");
      inp.setValor(" + ");
      inp.setIdNod(parser.contador++);  


     Nodo igu = new Nodo("Simbolo");
      igu.setValor(" = ");
      igu.setIdNod(parser.contador++);    
 
      nd.AddHijos((Nodo) igu);
      nd.AddHijos((Nodo) s2);
      nd.AddHijos((Nodo) inp);
      nd.AddHijos((Nodo) n2);
      nd.AddHijos((Nodo) lla);

      nd.setIdNod(parser.contador++);
   System.out.println("------------*************----------------");
      System.out.println("Compilacion exitosa!");
      System.out.println("------------*************----------------");


      RESULT = nd;
   
   

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= identificador cadena ptcoma 
            {
              Object RESULT =null;
		int nl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    parser.PalabraReservada.add(cadena);  parser.Simbolo.add(" ; "); 

     Nodo nd = new Nodo("First");
      nd.setValor(nl1);
      

      Nodo lla = new Nodo("ptcoma");
      lla.setValor(" ; ");
      lla.setIdNod(parser.contador++);
      

     Nodo inp = new Nodo("Input");
      inp.setValor(" cadena ");
      inp.setIdNod(parser.contador++);      
 
      nd.AddHijos((Nodo) inp);
      nd.AddHijos((Nodo) lla);
     

      nd.setIdNod(parser.contador++);

      RESULT = nd;
   
   

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= identificador decimal ptcoma 
            {
              Object RESULT =null;
		int nl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    parser.PalabraReservada.add(decimal);  parser.Simbolo.add(" ; "); 

     Nodo nd = new Nodo("First");
      nd.setValor(nl1);
      

      Nodo lla = new Nodo("ptcoma");
      lla.setValor(" ; ");
      lla.setIdNod(parser.contador++);
      

     Nodo inp = new Nodo("Input");
      inp.setValor(" decimal ");
      inp.setIdNod(parser.contador++);      
 
      nd.AddHijos((Nodo) inp);
      nd.AddHijos((Nodo) lla);
     

      nd.setIdNod(parser.contador++);

      RESULT = nd;
   
   

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= identificador entero ptcoma 
            {
              Object RESULT =null;
		int nl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    parser.PalabraReservada.add(entero);  parser.Simbolo.add(" ; "); 

     Nodo nd = new Nodo("First");
      nd.setValor(nl1);
      

      Nodo lla = new Nodo("ptcoma");
      lla.setValor(" ; ");
      lla.setIdNod(parser.contador++);
      

     Nodo inp = new Nodo("Input");
      inp.setValor(" entero ");
      inp.setIdNod(parser.contador++);      
 
      nd.AddHijos((Nodo) inp);
      nd.AddHijos((Nodo) lla);
     

      nd.setIdNod(parser.contador++);

      RESULT = nd;
   
   

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= identificador cigual relse parizq parder ptcoma 
            {
              Object RESULT =null;
		int nl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elsee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

           parser.PalabraReservada.add(elsee); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" ; "); parser.Simbolo.add(" = ");

  Nodo nd = new Nodo("First");
      nd.setValor(nl1);
      
      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      Nodo lla = new Nodo("Simbolo");
      lla.setValor(" ; ");
      lla.setIdNod(parser.contador++);
      
       Nodo igu = new Nodo("Simbolo");
      igu.setValor(" = ");
      igu.setIdNod(parser.contador++);

   Nodo inp = new Nodo("Input");
      inp.setValor(" elsee ");
      inp.setIdNod(parser.contador++);



      
      nd.AddHijos((Nodo) igu);
      nd.AddHijos((Nodo) inp);
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) lla);
     
   

      nd.setIdNod(parser.contador++);

      RESULT = nd;
   

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= identificador cigual rif parizq parder ptcoma 
            {
              Object RESULT =null;
		int nl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    parser.PalabraReservada.add(iff); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" ; "); parser.Simbolo.add(" = ");

  Nodo nd = new Nodo("First");
      nd.setValor(nl1);
      
      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      Nodo lla = new Nodo("Simbolo");
      lla.setValor(" ; ");
      lla.setIdNod(parser.contador++);
      
       Nodo igu = new Nodo("Simbolo");
      igu.setValor(" = ");
      igu.setIdNod(parser.contador++);

   Nodo inp = new Nodo("Input");
      inp.setValor(" iff ");
      inp.setIdNod(parser.contador++);



      
      nd.AddHijos((Nodo) igu);
      nd.AddHijos((Nodo) inp);
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) lla);
     
   

      nd.setIdNod(parser.contador++);

      RESULT = nd;
   

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= identificador cigual rmientras parizq parder ptcoma 
            {
              Object RESULT =null;
		int nl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String mientras = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

      parser.PalabraReservada.add(mientras); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" ; "); parser.Simbolo.add(" = "); 

      Nodo nd = new Nodo("First");
      nd.setValor(nl1);
      
      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      Nodo lla = new Nodo("Simbolo");
      lla.setValor(" ; ");
      lla.setIdNod(parser.contador++);
      
       Nodo igu = new Nodo("Simbolo");
      igu.setValor(" = ");
      igu.setIdNod(parser.contador++);

   Nodo inp = new Nodo("Input");
      inp.setValor(" mientras ");
      inp.setIdNod(parser.contador++);



      
      nd.AddHijos((Nodo) igu);
      nd.AddHijos((Nodo) inp);
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) lla);
     
   

      nd.setIdNod(parser.contador++);

      RESULT = nd;

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= rimprimir parizq EXPRE_CADENA parder ptcoma 
            {
              Object RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

   	  parser.PalabraReservada.add(imprimir); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" ; ");

      Nodo nd = new Nodo("IMPRIMIR");
      nd.setValor(" imprimir ");
      
      Nodo sim = new Nodo("Simbolo");
      sim.setValor(" ; ");
      sim.setIdNod(parser.contador++);

      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) nd1);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) sim);

      nd.setIdNod(parser.contador++);
      
      RESULT=nd;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("INSTRUCCION");
    tmp.setValor(" Instruccion ");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) s2);

    System.out.println("NODOS RAIZ tmp: "+tmp.Etiqueta);
    System.out.println("NODOS RAIZ s2: "+ ((Nodo)s2).getHijos());

    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("INSTRUCCIONES");
    tmp.setValor(" Lista_Instrucciones ");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    System.out.println("NODOS RAIZ tmp: "+tmp.Etiqueta);
    System.out.println("NODOS RAIZ s2: "+ ((Nodo)s2).getHijos());
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo nd = new Nodo("INICIO");
    nd.setIdNod(parser.contador++);
    nd.AddHijos((Nodo) instr);
    parser.padre = (Nodo) nd;

      System.out.println("------------*************----------------");
      System.out.println("Compilacion exitosa!");
      System.out.println("------------*************----------------");

    RESULT = instr;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

